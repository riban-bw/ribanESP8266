''`void gpiSetMode(uint8_t nPin, GPI_MODE_TYPE nMode);
`''

Configure the mode of a GPI pin


''Parameters''

>''nPin'' Index of the GPI pin

>''nMode'' Mode to set (GPIO_MODE_INPUT | GPIO_MODE_OUTPUT_OD | GPIO_MODE_OUTPUT | GPIO_MODE_OUTPUT_PWM)


---
''`void gpiSetInterrupt(uint32_t nPin, GPI_INT_TYPE nType);
`''

Set the interrupt type for a GPI pin


''Parameters''

>''nPin'' GPI pin to configure

>''nType'' Interrupt type (GPI_INTR_DISABLE | GPI_INTR_POSEDGE | GPI_INTR_NEGEDGE | GPI_INTR_ANYEGDE | GPI_INTR_LOLEVEL | GPI_INTR_HILEVEL)


''TODO''

Should gpiSetInterrupt be renamed to avoid ambiguity with configuring the overall interrupt mechanism and handlers?

---
''`bool gpiRead(uint8 nPin);
`''

Read a GPI input value


''Parameters''

>''nPin'' Index of the GPI pin


''Returns''

><i>bool</i> True if GPI pin is high


---
''`uint32_t gpiReadAll();
`''

Get the value of all GPI input pins


''Returns''

><i>uint32</i> Value of all GPI inputs presented as bitwise flags


---
''`void gpiWrite(uint8 nPin, bool bValue);
`''

Set a GPI output value


''Parameters''

>''nPin'' Index of the GPI pin

>''bValue'' Value to set GPI pin to


Set pin to output mode before calling this function


---
''`void gpiEnablePullup(uint8 nPin);
`''

Enable internal pull-up resistor


''Parameters''

>''nPin'' GPI pin


''TODO''

Do we require the ability to change the pull-up resistor configuration separate to configuring the pin mode?

---
''`void gpiDisablePullup(uint8 nPin);
`''

Disable internal pull-up resistor


''Parameters''

>''nPin'' GPI pin


''TODO''

Do we require the ability to change the pull-up resistor configuration separate to configuring the pin mode?

---
''`void gpiSelectBank(uint8_t nPin);
`''

Select GPI bank


''Parameters''

>''nPin'' GPI pin to select bank for


Used internally by GPI driver


''TODO''

Should this be more generic - outside GPI driver?

---
''`void gpiRegisterIntHandler(void *pFunction);
`''

Register an event handler for GPI interrupts


''Parameters''

>''pFunction'' Pointer to the event handler (callback) function


Each interrupt must be acknowledged by calling gpiAckInt. No further events will be generated until this is done.

Handler accepts one argument: uint32_t which is a bitwise mask of pending GPI interrupts (one bit per pin)


---
''`void gpiAckInt();
`''

Acknowledge interrupt


Must call this function after a GPI interrupt before further GPI interrupts will occur


---
''`uint32_t gpiGetPendingInterrupts();
`''

Gets pending GPI interrupts


''Returns''

><i>uint32_t</i> Bitwise mask of pending GPI interrupts


---
''`void gpiEnableWakeOnInt(uint32_t nPin, GPI_INT_TYPE nState);
`''

Enable wake on a GPI interrupt


''Parameters''

>''nPin'' Index of GPI pin

>''nState'' Interrupt state (GPI_INTR_LOLEVEL | GPI_INTR_HILEVEL)


Only high level and low level interrupts can be used for wakeup


---
''`void gpiDisableWakeOnInt();
`''

Disable wake on GPI interrupt


---
''`void gpiSetPwm(uint32_t nPin, uint16_t nFreq, uint8_t nWidth);
`''

Set the PWM output value


''Parameters''

>''nPin'' Index of GPI pin

>''nFreq'' PWM frequency

>''nWidth'' PWM width


---
